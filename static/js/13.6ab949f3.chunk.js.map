{"version":3,"file":"static/js/13.6ab949f3.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/ContactForm/ContactForm.module.css?b5b2","components/ContactForm/ContactForm.js","webpack://react-homework-template/./src/components/ContactItem/ContactItem.module.css?be2b","components/ContactItem/ContactItem.js","components/ContactList/ContactList.module.css","helpers/getVisibleContact.js","components/ContactList/ContactList.js","webpack://react-homework-template/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.js","webpack://react-homework-template/./src/pages/Contacts/Contacts.module.css?fb9d","pages/Contacts/Contacts.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"form\":\"ContactForm_form__dhl+T\",\"label\":\"ContactForm_label__-cVXI\",\"input\":\"ContactForm_input__Bl93P\",\"btn\":\"ContactForm_btn__wll+u\"};","import { useState } from \"react\";\n// import { useDispatch } from \"react-redux\";\n// import { addContact } from \"redux/contact/contact-operation\";\nimport { useGetContactsQuery, useAddContactMutation } from \"redux/contactsSlice\";\nimport s from './ContactForm.module.css'\n\n// onSubmit це пропси які приймаються тут\nexport default function ContactForm({ onSubmit }) {\n    // const dispatch = useDispatch()\n    const { data: contacts} = useGetContactsQuery(); // всі контакти\n    const [addContact] = useAddContactMutation(); \n    const [name, setName] = useState('');\n    const [number, setNumber] = useState('');\n\n    const handleChange = e => {\n        const { name, value } = e.currentTarget; // отримую значення в імпуті\n\n        // залежно від того яке поле міняється, то я записую в стейт\n        switch (name) {\n            case \"name\":\n                setName(value)\n                break;\n            \n            case \"number\":\n                setNumber(value);\n                break;\n        \n            default:\n                break;\n        }\n    };\n\n    const handleAddContact = async (e) => {\n        e.preventDefault();\n\n        try {\n            if (contacts.some(contact => contact.name === name)) { \n                return alert(`${name} is already in contacts`); // якщо в контактах є вже таке ім'я то видає помилку \n            };\n            await addContact({ name, number }) // виконую додавання контакту\n            // await dispatch(addContact({ name, phone }))\n            reset(); \n        } catch (error) {\n            console.log(error);\n        }\n    };\n\n\n    const reset = () => {\n        // очищую імпути\n        setName('');\n        setNumber('');\n    };\n\n    return (\n        <form onSubmit={handleAddContact} className={s.form}>\n            <label className={s.label}> Name\n                <input\n                    type=\"text\"\n                    name=\"name\"\n                    value={name}\n                    onChange={handleChange}\n                    className={s.input}\n                    pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                    title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n                    required\n                />\n            </label>\n            <label className={s.label}> Number\n                <input\n                    type=\"tel\"\n                    name=\"number\"\n                    value={number}\n                    onChange={handleChange}\n                    className={s.input}\n                    pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n                    title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n                    required\n                />\n            </label>\n            <button type=\"submit\" className={s.btn}>Add contact</button>\n        </form>\n    );\n};","// extracted by mini-css-extract-plugin\nexport default {\"items\":\"ContactItem_items__SjXY8\",\"btn\":\"ContactItem_btn__1h5dG\",\"span\":\"ContactItem_span__8yGo-\"};","import PropTypes from 'prop-types';\nimport s from './ContactItem.module.css';\n\nconst ContactItem = ({ id, name, number, onClick }) => {\n    return (\n        <li key={id} className={s.items} id=\"btn\">\n            <p>{name} : <span className={s.span}>{number}</span></p>\n            <button\n                type='button'\n                className={s.btn}\n                onClick={onClick}\n            >\n                Delete\n            </button>\n        </li>\n    )\n};\n\nexport default ContactItem;\n\nContactItem.propTypes = {\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n    onClick: PropTypes.func.isRequired,\n};","// extracted by mini-css-extract-plugin\nexport default {\"list\":\"ContactList_list__csErn\"};","const getVisibleContact = (filter, contacts) => {\n    const normalizedFilter = filter.toLowerCase(); // що не було похибки, то підношу всі до великих букв\n    // return\n    const filteredContact = contacts.filter(contact => contact.name.toLowerCase().includes(normalizedFilter)); // фільтрую і повертаю тільки ті контакти, які відповідають пошуку\n    const firstNewContact = [...filteredContact].sort((a, b) => b.id - a.id);\n    return firstNewContact\n};\n\nexport default getVisibleContact;","import ContactItem from '../ContactItem/ContactItem';\nimport s from './ContactList.module.css';\nimport { useGetContactsQuery, useDeleteContactMutation } from \"redux/contactsSlice\";\nimport { useSelector } from \"react-redux\";\nimport { getFilter } from 'redux/selectors';\nimport getVisibleContact from \"helpers/getVisibleContact\";\n\nconst ContactList = ({ onDeleteContact }) => {\n    const { data: contacts } = useGetContactsQuery(); // всі контакти\n    const [deleteContact] = useDeleteContactMutation();\n    const filter = useSelector(getFilter);\n    const filteredContacts = getVisibleContact(filter, contacts);\n\n    const handleDeleteContact = (id) => {\n        deleteContact(id)\n    };\n    \n    return (\n        <ul className={s.list}>\n            {filteredContacts.map(({ id, name, number }) =>\n                <ContactItem\n                    key={id}\n                    id={id}\n                    name={name}\n                    number={number}\n                    onClick={() => handleDeleteContact(id)}\n                />\n            )}\n        </ul>\n    );\n};\n\nexport default ContactList;","// extracted by mini-css-extract-plugin\nexport default {\"label\":\"Filter_label__vEd1E\",\"input\":\"Filter_input__N7T3z\"};","import s from './Filter.module.css';\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { getFilter } from 'redux/selectors';\nimport { filtered } from \"redux/searchFilterSlice\";\n\nconst Filter = () => {\n    const dispatch = useDispatch();\n    const filter = useSelector(getFilter);\n\n    const searchFilter = e => {\n        dispatch(filtered(e.currentTarget.value)) // отримую значення з інпуту і записую його\n    };\n    \n    return (\n        <label className={s.label}> Find contacts by name\n            <input\n                type=\"text\"\n                value={filter}\n                onChange={searchFilter}\n                className={s.input}\n            />\n        </label>\n    );\n};\n\nexport default Filter;","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"Contacts_container__WzsIr\"};","import ContactForm from 'components/ContactForm/ContactForm';\nimport ContactList from 'components/ContactList/ContactList';\nimport Filter from 'components/Filter/Filter';\nimport s from './Contacts.module.css'\nimport { useGetContactsQuery } from \"redux/contactsSlice\";\nimport Loader from 'components/Loader/Loader';\n\nconst Contacts = () => {\n    const { data: contacts, error, isLoading } = useGetContactsQuery(); // всі контакти\n\n    return (\n        <div className={s.container}>\n            <h1>Phonebook</h1>\n            <ContactForm />\n            <h2>Contacts</h2>\n            <Filter />\n            {error && <h1>{error}</h1>}\n            {isLoading && <Loader />}\n            {contacts && <ContactList />}\n        </div>   \n    );\n};\n\nexport default Contacts;"],"names":["ContactForm","onSubmit","contacts","useGetContactsQuery","data","useAddContactMutation","addContact","useState","name","setName","number","setNumber","handleChange","e","currentTarget","value","handleAddContact","preventDefault","some","contact","alert","reset","console","log","className","s","type","onChange","pattern","title","required","id","onClick","filter","normalizedFilter","toLowerCase","filteredContact","includes","sort","a","b","onDeleteContact","useDeleteContactMutation","deleteContact","useSelector","getFilter","filteredContacts","getVisibleContact","map","handleDeleteContact","dispatch","useDispatch","filtered","error","isLoading","Loader"],"sourceRoot":""}